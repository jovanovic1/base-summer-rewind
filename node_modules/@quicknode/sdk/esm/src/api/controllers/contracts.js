import { __decorate, __metadata } from 'tslib';
import { DEFAULT_CHAIN } from '../utils/constants.js';
import { contractDetailsValidator } from '../types/contracts/getContractDetails.js';
import { CodegenEthMainnetContractDetailsDocument } from '../graphql/generatedTypes.js';
import { ValidateInput } from '../../lib/validation/ValidateInput.js';
import { modifyQueryForChain } from '../graphql/modifyQueryForChain.js';

class ContractsController {
    constructor(client, defaultChain = DEFAULT_CHAIN) {
        this.client = client;
        this.defaultChain = defaultChain;
    }
    async getDetails(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetContractDetailsDocument);
        const result = await this.client.query({
            variables: queryVariables,
            query: query,
        });
        const contract = result?.data?.[userChain]?.contract;
        if (contract)
            return { contract };
        return { contract: null };
    }
}
__decorate([
    ValidateInput(contractDetailsValidator),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], ContractsController.prototype, "getDetails", null);

export { ContractsController };
