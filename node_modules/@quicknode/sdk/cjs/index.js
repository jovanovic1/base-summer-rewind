'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fetch = require('cross-fetch');
var core = require('@urql/core');
var exchangeGraphcache = require('@urql/exchange-graphcache');
var tslib = require('tslib');
var zod = require('zod');
var graphql = require('graphql');
var klona = require('klona');
var viem = require('viem');
var chains = require('viem/chains');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var fetch__default = /*#__PURE__*/_interopDefaultLegacy(fetch);
var viem__namespace = /*#__PURE__*/_interopNamespace(viem);

function isConnection(object) {
    return (typeof object === 'object' &&
        !!object &&
        ('edges' in object ||
            'total' in object ||
            'pageInfo' in object ||
            'breadcrumbs' in object));
}
function removeNodesAndEdges(data) {
    const keys = Object.keys(data);
    const output = {};
    keys.forEach((key) => {
        const value = data[key];
        if (typeof value === 'string' ||
            typeof value === 'boolean' ||
            typeof value === 'number' ||
            value === null ||
            value === undefined) {
            return (output[key] = value);
        }
        if (Array.isArray(value)) {
            // An array can just be an array of strings and not edges and nodes
            if (value.every((val) => typeof val === 'string')) {
                return (output[key] = value);
            }
            return (output[key] = value.map((item) => removeNodesAndEdges(item)));
        }
        if (isConnection(value)) {
            if (value.breadcrumbs)
                output[`${key}Breadcrumbs`] = value.breadcrumbs;
            if (value.total)
                output[`${key}Total`] = value.total;
            if (value.viewport)
                output[`${key}Viewport`] = value.viewport;
            if (value.pageInfo) {
                const { ...pageInfoRest } = value.pageInfo;
                output[`${key}PageInfo`] = pageInfoRest;
            }
            return (output[key] = value.edges?.map((item) => {
                if (item.node) {
                    return removeNodesAndEdges(item.node);
                }
                return item;
            }));
        }
        return (output[key] = removeNodesAndEdges(value));
    });
    return output;
}

class CustomUrqlClient {
    constructor(urqlClient) {
        this.urqlClient = urqlClient;
    }
    async query(options) {
        const { query, variables, ...additionalOptions } = options;
        const result = await this.urqlClient.query(query, variables, additionalOptions);
        const { error } = result;
        if (error) {
            console.error(error.stack);
            throw error;
        }
        return {
            ...result,
            data: result?.data &&
                removeNodesAndEdges(result.data),
        };
    }
}

// Below are zod enums used a validators that should be the same as the string unions generated by codegen.
// There are compile-time checks to ensure that they are the same and in sync. If you are getting a
// type error here, you need to update the the validator array to match the codegen type.
const CONTRACT_STANDARDS = ['ERC20', 'ERC721', 'ERC1155'];
const isContractStandard = zod.z.enum(CONTRACT_STANDARDS);
const MARKETPLACES = [
    'BLUR',
    'CRYPTOPUNKS',
    'LOOKSRARE',
    'NIFTY_GATEWAY',
    'OPENSEA',
    'SEAPORT',
    'X2Y2',
    'ZEROX',
];
const isMarketplace = zod.z.enum(MARKETPLACES);
const TOKEN_TRANSFER_TYPES = [
    'TRANSFER',
    'MINT',
    'SALE',
    'SWAP',
    'BURN',
];
const isTokenTransferType = zod.z.enum(TOKEN_TRANSFER_TYPES);

const supportedChains = [
    'ethereum',
    'polygon',
    'ethereumSepolia',
];

/**
 * https://eips.ethereum.org/EIPS/eip-137#name-syntax
 *
 * explanation of the regex pattern:
 * ^  Matches the start of the string
 * (?=.{3,255}$) Lookahead assertion for the length of the string (3 to 255 characters)
 * [\p{L}\p{N}\p{Pd}\p{M}\p{S}\u{1F300}-\u{1F6FF}]+  Matches one or more Unicode letter, number, punctuation, symbol, or character in the specified emoji range
 * (\.[\p{L}\p{N}\p{Pd}\p{M}\p{S}\u{1F300}-\u{1F6FF}]+)*  Matches zero or more occurrences of a dot followed by one or more Unicode characters
 * \.(?:eth|xyz|art)  Matches a dot followed by either 'eth', 'xyz', or 'art'
 * $  Matches the end of the string
 *
 */
function isValidENSAddress(ensAddress) {
    const allowedTLDs = ['eth', 'xyz', 'art'];
    const unicodeAndEmojis = '[\\p{L}\\p{N}\\p{Pd}\\p{M}\\p{S}\\u{1F300}-\\u{1F6FF}]';
    const regexPattern = `^(?=.{3,255}$)${unicodeAndEmojis}+(\\.${unicodeAndEmojis}+)*\\.(?:${allowedTLDs.join('|')})$`;
    const regex = new RegExp(regexPattern, 'mu');
    return regex.test(ensAddress);
}

const isEvmAddress = zod.z
    .string()
    .length(42) // Using built-in function for better error messages
    .startsWith('0x') // Using built-in function for better error messages
    .regex(/^0x[a-fA-F0-9]{40}$/, 'Not a valid address');
const isENSAddress = zod.z.string().refine((val) => isValidENSAddress(val));
const isEvmTransactionHash = zod.z
    .string()
    .length(66) // Using built-in function for better error messages
    .startsWith('0x') // Using built-in function for better error messages
    .regex(/^0x[a-fA-F0-9]{64}$/, 'Not a valid transaction hash');
const supportedChainInput = zod.z
    .object({
    chain: zod.z.enum(supportedChains).nullish(),
})
    .strict();
function fullFilters(baseType) {
    return zod.z
        .object({
        eq: baseType.nullish(),
        gt: baseType.nullish(),
        gte: baseType.nullish(),
        in: zod.z.array(baseType).nullish(),
        lt: baseType.nullish(),
        lte: baseType.nullish(),
        notIn: zod.z.array(baseType).nullish(),
    })
        .strict();
}
function limitedFilters(baseType) {
    return zod.z
        .object({
        eq: baseType.nullish(),
        in: zod.z.array(baseType).nullish(),
        notIn: zod.z.array(baseType).nullish(),
    })
        .strict();
}
const tokenEventFilters = zod.z
    .object({
    blockNumber: fullFilters(zod.z.number().positive()).nullish(),
    contractAddress: limitedFilters(isEvmAddress).nullish(),
    contractStandard: limitedFilters(isContractStandard).nullish(),
    fromAddress: limitedFilters(isEvmAddress).nullish(),
    marketplace: limitedFilters(isMarketplace).nullish(),
    timestamp: fullFilters(zod.z.string().datetime({ offset: true })).nullish(),
    toAddress: limitedFilters(isEvmAddress).nullish(),
    transactionHash: limitedFilters(isEvmTransactionHash).nullish(),
    type: limitedFilters(isTokenTransferType).nullish(),
    walletAddress: limitedFilters(isEvmAddress).nullish(),
})
    .strict();
const transactionFilters = zod.z
    .object({
    blockNumber: fullFilters(zod.z.number().positive()).nullish(),
    fromAddress: isEvmAddress.nullish(),
    timestamp: fullFilters(zod.z.string().datetime({ offset: true })).nullish(),
    toAddress: isEvmAddress.nullish(),
})
    .strict();
const gasPriceFilters = zod.z
    .object({
    blockNumber: fullFilters(zod.z.number().positive()).nullish(),
})
    .strict();
const paginationParams = zod.z
    .object({
    before: zod.z.string().nullish(),
    after: zod.z.string().nullish(),
    first: zod.z.number().positive().nullish(),
})
    .strict();
const baseEventsInput = zod.z
    .object({
    filter: tokenEventFilters.nullish(),
})
    .merge(paginationParams)
    .strict();
const baseTransactionsInput = zod.z
    .object({
    filter: transactionFilters.optional(),
})
    .merge(paginationParams)
    .strict();
const contractTokensFilter = zod.z
    .array(zod.z
    .object({
    contractAddress: isEvmAddress,
    tokenId: zod.z.string().optional(),
})
    .strict())
    .nonempty();
const rpcPaginationParams = zod.z
    .object({
    perPage: zod.z.number().positive().nullish(),
    page: zod.z.number().positive().nullish(),
})
    .strict();

const walletByAddressValidator = zod.z
    .object({
    address: zod.z.union([isENSAddress, isEvmAddress]),
    filter: zod.z
        .object({
        contractTokens: contractTokensFilter,
    })
        .strict()
        .optional(),
})
    .merge(paginationParams)
    .merge(supportedChainInput)
    .strict();

const nftDetailsValidator = zod.z
    .object({ contractAddress: isEvmAddress, tokenId: zod.z.string() })
    .merge(supportedChainInput)
    .strict();

const nftCollectionDetailsValidator = zod.z
    .object({
    contractAddress: isEvmAddress,
})
    .merge(supportedChainInput)
    .strict();

const nftTrendingCollectionsValidator = paginationParams
    .merge(supportedChainInput)
    .strict();

const nftsByContractAddressValidator = zod.z
    .object({ contractAddress: isEvmAddress })
    .merge(paginationParams)
    .merge(supportedChainInput)
    .strict();

const verifyOwnershipValidator = zod.z
    .object({
    address: zod.z.union([isENSAddress, isEvmAddress]),
    nfts: contractTokensFilter,
})
    .merge(supportedChainInput)
    .strict();

const CodegenEthMainnetContractDetailsDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetContractDetails" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "contractAddress" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "ContractDetails" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "ContractInfo" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "Contract" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "abi" } }, { "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "isVerified" } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "supportedErcInterfaces" } }, { "kind": "Field", "name": { "kind": "Name", "value": "symbol" } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenContract" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "decimals" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "ContractDetails" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "contract" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "contractAddress" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "contractAddress" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "ContractInfo" } }] } }] } }] };
const CodegenEthereumMainnetEventsGetAllDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthereumMainnetEventsGetAll" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenEventsFilterInput" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "Int" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "EventsGetAll" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TokenEventInfo" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "blockNumber" } }, { "kind": "Field", "name": { "kind": "Name", "value": "fromAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "timestamp" } }, { "kind": "Field", "name": { "kind": "Name", "value": "toAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "transactionHash" } }, { "kind": "Field", "name": { "kind": "Name", "value": "transferIndex" } }, { "kind": "Field", "name": { "kind": "Name", "value": "type" } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenBurnEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenQuantity" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenTransferEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenQuantity" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenMintEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "tokenQuantity" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenSaleEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "marketplace" } }, { "kind": "Field", "name": { "kind": "Name", "value": "receivedTokenContractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "receivedTokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "sentTokenId" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "Pagination" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PageInfo" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "endCursor" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasNextPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasPreviousPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "startCursor" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "EventsGetAll" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "tokenEvents" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "filter" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "first" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "before" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "after" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TokenEventInfo" } }] } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "pageInfo" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "Pagination" } }] } }] } }] } }] };
const CodegenEthereumMainnetEventsByContractDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthereumMainnetEventsByContract" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "contractAddress" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenEventsFilterInput" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "Int" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "EventsByContract" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TokenEventInfo" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "blockNumber" } }, { "kind": "Field", "name": { "kind": "Name", "value": "fromAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "timestamp" } }, { "kind": "Field", "name": { "kind": "Name", "value": "toAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "transactionHash" } }, { "kind": "Field", "name": { "kind": "Name", "value": "transferIndex" } }, { "kind": "Field", "name": { "kind": "Name", "value": "type" } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenBurnEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenQuantity" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenTransferEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenQuantity" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenMintEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "tokenQuantity" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenSaleEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "marketplace" } }, { "kind": "Field", "name": { "kind": "Name", "value": "receivedTokenContractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "receivedTokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "sentTokenId" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "Pagination" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PageInfo" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "endCursor" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasNextPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasPreviousPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "startCursor" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "EventsByContract" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "contract" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "contractAddress" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "contractAddress" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "tokenEvents" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "filter" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "first" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "before" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "after" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TokenEventInfo" } }] } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "pageInfo" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "Pagination" } }] } }] } }] } }] } }] };
const CodegenEthMainnetEventsByCollectionDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetEventsByCollection" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "contractAddress" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenEventsFilterInput" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "Int" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "CollectionEventsFragment" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "Pagination" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PageInfo" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "endCursor" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasNextPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasPreviousPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "startCursor" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TokenEventInfo" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "blockNumber" } }, { "kind": "Field", "name": { "kind": "Name", "value": "fromAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "timestamp" } }, { "kind": "Field", "name": { "kind": "Name", "value": "toAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "transactionHash" } }, { "kind": "Field", "name": { "kind": "Name", "value": "transferIndex" } }, { "kind": "Field", "name": { "kind": "Name", "value": "type" } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenBurnEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenQuantity" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenTransferEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenQuantity" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenMintEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "tokenQuantity" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenSaleEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "marketplace" } }, { "kind": "Field", "name": { "kind": "Name", "value": "receivedTokenContractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "receivedTokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "sentTokenId" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "CollectionEventsFragment" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "collection" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "contractAddress" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "contractAddress" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenEvents" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "filter" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "before" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "after" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "first" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "pageInfo" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "Pagination" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TokenEventInfo" } }] } }] } }] } }] } }] } }] };
const CodegenEthereumMainnetEventsByNftDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthereumMainnetEventsByNft" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "contractAddress" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "tokenId" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenEventsFilterInput" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "Int" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "NftEventsFragment" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "Pagination" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PageInfo" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "endCursor" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasNextPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasPreviousPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "startCursor" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TokenEventInfo" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "blockNumber" } }, { "kind": "Field", "name": { "kind": "Name", "value": "fromAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "timestamp" } }, { "kind": "Field", "name": { "kind": "Name", "value": "toAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "transactionHash" } }, { "kind": "Field", "name": { "kind": "Name", "value": "transferIndex" } }, { "kind": "Field", "name": { "kind": "Name", "value": "type" } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenBurnEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenQuantity" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenTransferEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenQuantity" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenMintEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "tokenQuantity" } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "TokenSaleEvent" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "marketplace" } }, { "kind": "Field", "name": { "kind": "Name", "value": "receivedTokenContractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "receivedTokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "sentTokenId" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "NftEventsFragment" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "nft" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "contractAddress" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "contractAddress" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "tokenId" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "tokenId" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenEvents" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "filter" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "before" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "after" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "first" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "pageInfo" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "Pagination" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TokenEventInfo" } }] } }] } }] } }] } }] } }] };
const CodegenEthMainnetWalletNFTsByContractAddressDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetWalletNFTsByContractAddress" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "contractAddress" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "Int" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "NftsByContractAddressFragment" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "Pagination" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PageInfo" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "endCursor" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasNextPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasPreviousPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "startCursor" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "ERC1155NFTNode" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "ERC1155NFT" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "animationUrl" } }, { "kind": "Field", "name": { "kind": "Name", "value": "collectionSlug" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "description" } }, { "kind": "Field", "name": { "kind": "Name", "value": "externalUrl" } }, { "kind": "Field", "name": { "kind": "Name", "value": "metadata" } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "wallets" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "ensName" } }] } }] } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "ERC721NFTNode" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "ERC721NFT" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "animationUrl" } }, { "kind": "Field", "name": { "kind": "Name", "value": "attributes" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "value" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "collectionSlug" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "description" } }, { "kind": "Field", "name": { "kind": "Name", "value": "externalUrl" } }, { "kind": "Field", "name": { "kind": "Name", "value": "metadata" } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }, { "kind": "Field", "name": { "kind": "Name", "value": "wallet" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "ensName" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "NftsByContractAddressFragment" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "collection" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "contractAddress" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "contractAddress" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "ERC1155Collection" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "nfts" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "first" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "before" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "after" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "pageInfo" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "Pagination" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "ERC1155NFTNode" } }] } }] } }] } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "ERC721Collection" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "nfts" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "first" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "before" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "after" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "pageInfo" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "Pagination" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "ERC721NFTNode" } }] } }] } }] } }] } }] } }] } }] };
const CodegenEthMainnetWalletNFTsByAddressDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetWalletNFTsByAddress" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "address" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "Int" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "WalletNFTsFilterInput" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "WalletByAddressFragment" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "Pagination" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PageInfo" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "endCursor" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasNextPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasPreviousPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "startCursor" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "WalletNFTNode" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "WalletNFT" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "nft" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "animationUrl" } }, { "kind": "Field", "name": { "kind": "Name", "value": "collectionSlug" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "description" } }, { "kind": "Field", "name": { "kind": "Name", "value": "externalUrl" } }, { "kind": "Field", "name": { "kind": "Name", "value": "metadata" } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "WalletByAddressFragment" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "walletByAddress" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "address" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "address" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "ensName" } }, { "kind": "Field", "name": { "kind": "Name", "value": "walletNFTs" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "before" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "after" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "first" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "filter" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "pageInfo" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "Pagination" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "WalletNFTNode" } }] } }] } }] } }] } }] } }] };
const CodegenEthMainnetWalletNFTsByEnsDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetWalletNFTsByEns" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "ensName" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "Int" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "WalletNFTsFilterInput" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "WalletByEnsFragment" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "Pagination" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PageInfo" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "endCursor" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasNextPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasPreviousPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "startCursor" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "WalletNFTNode" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "WalletNFT" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "nft" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "animationUrl" } }, { "kind": "Field", "name": { "kind": "Name", "value": "collectionSlug" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "description" } }, { "kind": "Field", "name": { "kind": "Name", "value": "externalUrl" } }, { "kind": "Field", "name": { "kind": "Name", "value": "metadata" } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "WalletByEnsFragment" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "walletByENS" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "ensName" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "ensName" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "ensName" } }, { "kind": "Field", "name": { "kind": "Name", "value": "walletNFTs" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "before" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "after" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "first" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "filter" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "pageInfo" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "Pagination" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "WalletNFTNode" } }] } }] } }] } }] } }] } }] };
const CodegenEthMainnetNFTDetailsDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetNFTDetails" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "contractAddress" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "tokenId" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "NftDetails" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "NftDetails" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "nft" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "contractAddress" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "contractAddress" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "tokenId" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "tokenId" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "__typename" } }, { "kind": "Field", "name": { "kind": "Name", "value": "animationUrl" } }, { "kind": "Field", "name": { "kind": "Name", "value": "collectionSlug" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "description" } }, { "kind": "Field", "name": { "kind": "Name", "value": "externalUrl" } }, { "kind": "Field", "name": { "kind": "Name", "value": "metadata" } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "ERC1155NFT" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "wallets" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "ensName" } }] } }] } }] } }] } }, { "kind": "InlineFragment", "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "ERC721NFT" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "wallet" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "ensName" } }] } }] } }] } }] } }] };
const CodegenEthMainnetNftCollectionDetailsDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetNftCollectionDetails" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "contractAddress" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "NftCollectionInfo" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "NftCollectionInfo" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "collection" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "contractAddress" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "contractAddress" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "bannerImage" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "height" } }, { "kind": "Field", "name": { "kind": "Name", "value": "mimeType" } }, { "kind": "Field", "name": { "kind": "Name", "value": "url" } }, { "kind": "Field", "name": { "kind": "Name", "value": "width" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "baseTokenUri" } }, { "kind": "Field", "name": { "kind": "Name", "value": "circulatingSupply" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contract" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "isVerified" } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "symbol" } }, { "kind": "Field", "name": { "kind": "Name", "value": "supportedErcInterfaces" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "description" } }, { "kind": "Field", "name": { "kind": "Name", "value": "externalUrl" } }, { "kind": "Field", "name": { "kind": "Name", "value": "image" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "height" } }, { "kind": "Field", "name": { "kind": "Name", "value": "mimeType" } }, { "kind": "Field", "name": { "kind": "Name", "value": "url" } }, { "kind": "Field", "name": { "kind": "Name", "value": "width" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "ohlcvChart" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "filter" }, "value": { "kind": "ObjectValue", "fields": [{ "kind": "ObjectField", "name": { "kind": "Name", "value": "limit" }, "value": { "kind": "IntValue", "value": "1" } }] } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "average" } }, { "kind": "Field", "name": { "kind": "Name", "value": "close" } }, { "kind": "Field", "name": { "kind": "Name", "value": "count" } }, { "kind": "Field", "name": { "kind": "Name", "value": "high" } }, { "kind": "Field", "name": { "kind": "Name", "value": "low" } }, { "kind": "Field", "name": { "kind": "Name", "value": "open" } }, { "kind": "Field", "name": { "kind": "Name", "value": "volume" } }, { "kind": "Field", "name": { "kind": "Name", "value": "timestamp" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "openseaMetadata" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "isHidden" } }, { "kind": "Field", "name": { "kind": "Name", "value": "isVerified" } }, { "kind": "Field", "name": { "kind": "Name", "value": "unsafeSlug" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "slug" } }, { "kind": "Field", "name": { "kind": "Name", "value": "symbol" } }, { "kind": "Field", "name": { "kind": "Name", "value": "totalSupply" } }, { "kind": "Field", "name": { "kind": "Name", "value": "twitterUsername" } }] } }] } }] };
const CodegenEthMainnetTrendingCollectionsDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetTrendingCollections" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "Int" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "NftTrendingCollections" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "Pagination" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PageInfo" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "endCursor" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasNextPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasPreviousPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "startCursor" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TrendingCollectionInfo" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "Collection" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "baseTokenUri" } }, { "kind": "Field", "name": { "kind": "Name", "value": "circulatingSupply" } }, { "kind": "Field", "name": { "kind": "Name", "value": "description" } }, { "kind": "Field", "name": { "kind": "Name", "value": "externalUrl" } }, { "kind": "Field", "name": { "kind": "Name", "value": "image" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "height" } }, { "kind": "Field", "name": { "kind": "Name", "value": "mimeType" } }, { "kind": "Field", "name": { "kind": "Name", "value": "url" } }, { "kind": "Field", "name": { "kind": "Name", "value": "width" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "openseaMetadata" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "isHidden" } }, { "kind": "Field", "name": { "kind": "Name", "value": "isVerified" } }, { "kind": "Field", "name": { "kind": "Name", "value": "unsafeSlug" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "symbol" } }, { "kind": "Field", "name": { "kind": "Name", "value": "totalSupply" } }, { "kind": "Field", "name": { "kind": "Name", "value": "twitterUsername" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "NftTrendingCollections" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "trendingCollections" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "first" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "before" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "after" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "pageInfo" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "Pagination" } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "collection" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TrendingCollectionInfo" } }] } }] } }] } }] } }] } }] };
const CodegenEthMainnetVerifyOwnershipByAddressDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetVerifyOwnershipByAddress" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "address" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "WalletNFTsFilterInput" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "VerifyOwnershipInfo" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "VerifyOwnershipNFTDetails" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "WalletNFT" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "nft" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "VerifyOwnershipInfo" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "walletByAddress" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "address" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "address" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "walletNFTs" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "filter" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "VerifyOwnershipNFTDetails" } }] } }] } }] } }] } }] } }] };
const CodegenEthMainnetVerifyOwnershipByENSDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetVerifyOwnershipByENS" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "ensName" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "WalletNFTsFilterInput" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "VerifyOwnershipInfoByENS" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "VerifyOwnershipNFTDetails" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "WalletNFT" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "nft" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenId" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "VerifyOwnershipInfoByENS" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "walletByENS" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "ensName" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "ensName" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "walletNFTs" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "filter" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "VerifyOwnershipNFTDetails" } }] } }] } }] } }] } }] } }] };
const CodegenEthMainnetBalancesByWalletAddressDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetBalancesByWalletAddress" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "address" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "Int" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "GetBalancesByWalletAddressFragment" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TokenBalanceNode" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "WalletTokenBalance" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "totalBalance" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contract" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "decimals" } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "symbol" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "Pagination" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PageInfo" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "endCursor" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasNextPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasPreviousPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "startCursor" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "GetBalancesByWalletAddressFragment" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "walletByAddress" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "address" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "address" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "ensName" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenBalances" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "first" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "before" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "after" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TokenBalanceNode" } }] } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "pageInfo" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "Pagination" } }] } }] } }] } }] } }] };
const CodegenEthMainnetBalancesByWalletENSDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetBalancesByWalletENS" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "ensName" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "Int" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "GetBalancesByWalletENSFragment" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TokenBalanceNode" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "WalletTokenBalance" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "totalBalance" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contract" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "decimals" } }, { "kind": "Field", "name": { "kind": "Name", "value": "name" } }, { "kind": "Field", "name": { "kind": "Name", "value": "symbol" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "Pagination" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PageInfo" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "endCursor" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasNextPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasPreviousPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "startCursor" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "GetBalancesByWalletENSFragment" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "walletByENS" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "ensName" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "ensName" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "ensName" } }, { "kind": "Field", "name": { "kind": "Name", "value": "tokenBalances" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "first" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "before" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "after" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TokenBalanceNode" } }] } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "pageInfo" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "Pagination" } }] } }] } }] } }] } }] };
const CodegenEthMainnetTransactionsByHashDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetTransactionsByHash" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "hash" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TransactionsByHash" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TransactionsNode" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "Transaction" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "blockNumber" } }, { "kind": "Field", "name": { "kind": "Name", "value": "blockTimestamp" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "fromAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "cumulativeGasUsed" } }, { "kind": "Field", "name": { "kind": "Name", "value": "effectiveGasPrice" } }, { "kind": "Field", "name": { "kind": "Name", "value": "gas" } }, { "kind": "Field", "name": { "kind": "Name", "value": "gasPrice" } }, { "kind": "Field", "name": { "kind": "Name", "value": "gasUsed" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hash" } }, { "kind": "Field", "name": { "kind": "Name", "value": "maxFeePerGas" } }, { "kind": "Field", "name": { "kind": "Name", "value": "maxPriorityFeePerGas" } }, { "kind": "Field", "name": { "kind": "Name", "value": "toAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "type" } }, { "kind": "Field", "name": { "kind": "Name", "value": "input" } }, { "kind": "Field", "name": { "kind": "Name", "value": "transactionIndex" } }, { "kind": "Field", "name": { "kind": "Name", "value": "value" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TransactionsByHash" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "transaction" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "hash" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "hash" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TransactionsNode" } }] } }] } }] };
const CodegenEthMainnetTransactionsBySearchDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetTransactionsBySearch" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "TransactionsFilterInput" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "Int" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TransactionsBySearch" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TransactionsNode" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "Transaction" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "blockNumber" } }, { "kind": "Field", "name": { "kind": "Name", "value": "blockTimestamp" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "fromAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "cumulativeGasUsed" } }, { "kind": "Field", "name": { "kind": "Name", "value": "effectiveGasPrice" } }, { "kind": "Field", "name": { "kind": "Name", "value": "gas" } }, { "kind": "Field", "name": { "kind": "Name", "value": "gasPrice" } }, { "kind": "Field", "name": { "kind": "Name", "value": "gasUsed" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hash" } }, { "kind": "Field", "name": { "kind": "Name", "value": "maxFeePerGas" } }, { "kind": "Field", "name": { "kind": "Name", "value": "maxPriorityFeePerGas" } }, { "kind": "Field", "name": { "kind": "Name", "value": "toAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "type" } }, { "kind": "Field", "name": { "kind": "Name", "value": "input" } }, { "kind": "Field", "name": { "kind": "Name", "value": "transactionIndex" } }, { "kind": "Field", "name": { "kind": "Name", "value": "value" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "Pagination" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PageInfo" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "endCursor" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasNextPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasPreviousPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "startCursor" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TransactionsBySearch" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "transactions" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "filter" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "before" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "after" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "first" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TransactionsNode" } }] } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "pageInfo" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "Pagination" } }] } }] } }] } }] };
const CodegenEthMainnetTransactionsByWalletAddressDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetTransactionsByWalletAddress" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "address" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "Int" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TransactionsByWalletAddress" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TransactionsNode" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "Transaction" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "blockNumber" } }, { "kind": "Field", "name": { "kind": "Name", "value": "blockTimestamp" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "fromAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "cumulativeGasUsed" } }, { "kind": "Field", "name": { "kind": "Name", "value": "effectiveGasPrice" } }, { "kind": "Field", "name": { "kind": "Name", "value": "gas" } }, { "kind": "Field", "name": { "kind": "Name", "value": "gasPrice" } }, { "kind": "Field", "name": { "kind": "Name", "value": "gasUsed" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hash" } }, { "kind": "Field", "name": { "kind": "Name", "value": "maxFeePerGas" } }, { "kind": "Field", "name": { "kind": "Name", "value": "maxPriorityFeePerGas" } }, { "kind": "Field", "name": { "kind": "Name", "value": "toAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "type" } }, { "kind": "Field", "name": { "kind": "Name", "value": "input" } }, { "kind": "Field", "name": { "kind": "Name", "value": "transactionIndex" } }, { "kind": "Field", "name": { "kind": "Name", "value": "value" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "Pagination" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PageInfo" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "endCursor" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasNextPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasPreviousPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "startCursor" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TransactionsByWalletAddress" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "walletByAddress" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "address" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "address" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "ensName" } }, { "kind": "Field", "name": { "kind": "Name", "value": "transactions" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "first" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "before" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "after" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TransactionsNode" } }] } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "pageInfo" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "Pagination" } }] } }] } }] } }] } }] };
const CodegenEthMainnetTransactionsByWalletENSDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetTransactionsByWalletENS" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "ensName" } }, "type": { "kind": "NonNullType", "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "Int" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }, { "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "String" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TransactionsByWalletENS" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TransactionsNode" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "Transaction" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "blockNumber" } }, { "kind": "Field", "name": { "kind": "Name", "value": "blockTimestamp" } }, { "kind": "Field", "name": { "kind": "Name", "value": "contractAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "fromAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "cumulativeGasUsed" } }, { "kind": "Field", "name": { "kind": "Name", "value": "effectiveGasPrice" } }, { "kind": "Field", "name": { "kind": "Name", "value": "gas" } }, { "kind": "Field", "name": { "kind": "Name", "value": "gasPrice" } }, { "kind": "Field", "name": { "kind": "Name", "value": "gasUsed" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hash" } }, { "kind": "Field", "name": { "kind": "Name", "value": "maxFeePerGas" } }, { "kind": "Field", "name": { "kind": "Name", "value": "maxPriorityFeePerGas" } }, { "kind": "Field", "name": { "kind": "Name", "value": "toAddress" } }, { "kind": "Field", "name": { "kind": "Name", "value": "type" } }, { "kind": "Field", "name": { "kind": "Name", "value": "input" } }, { "kind": "Field", "name": { "kind": "Name", "value": "transactionIndex" } }, { "kind": "Field", "name": { "kind": "Name", "value": "value" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "Pagination" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "PageInfo" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "endCursor" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasNextPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "hasPreviousPage" } }, { "kind": "Field", "name": { "kind": "Name", "value": "startCursor" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "TransactionsByWalletENS" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "walletByENS" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "ensName" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "ensName" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "address" } }, { "kind": "Field", "name": { "kind": "Name", "value": "ensName" } }, { "kind": "Field", "name": { "kind": "Name", "value": "transactions" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "first" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "first" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "before" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "before" } } }, { "kind": "Argument", "name": { "kind": "Name", "value": "after" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "after" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "edges" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "node" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "TransactionsNode" } }] } }] } }, { "kind": "Field", "name": { "kind": "Name", "value": "pageInfo" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "Pagination" } }] } }] } }] } }] } }] };
const CodegenEthMainnetGasPricesDocument = { "kind": "Document", "definitions": [{ "kind": "OperationDefinition", "operation": "query", "name": { "kind": "Name", "value": "EthMainnetGasPrices" }, "variableDefinitions": [{ "kind": "VariableDefinition", "variable": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } }, "type": { "kind": "NamedType", "name": { "kind": "Name", "value": "GasPriceFilterInput" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "ethereum" }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "GasPrice" } }] } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "GasPriceInfo" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "GasPrice" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "blockNumber" } }, { "kind": "Field", "name": { "kind": "Name", "value": "total" } }, { "kind": "Field", "name": { "kind": "Name", "value": "average" } }, { "kind": "Field", "name": { "kind": "Name", "value": "ceiling" } }, { "kind": "Field", "name": { "kind": "Name", "value": "floor" } }, { "kind": "Field", "name": { "kind": "Name", "value": "median" } }] } }, { "kind": "FragmentDefinition", "name": { "kind": "Name", "value": "GasPrice" }, "typeCondition": { "kind": "NamedType", "name": { "kind": "Name", "value": "EVMSchemaType" } }, "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "Field", "name": { "kind": "Name", "value": "gasPrices" }, "arguments": [{ "kind": "Argument", "name": { "kind": "Name", "value": "filter" }, "value": { "kind": "Variable", "name": { "kind": "Name", "value": "filter" } } }], "selectionSet": { "kind": "SelectionSet", "selections": [{ "kind": "FragmentSpread", "name": { "kind": "Name", "value": "GasPriceInfo" } }] } }] } }] };

// Formats the query result with the edges and nodes removed into what we want to return to the user
function formatQueryResult(queryResult, resultsKey, // Key that the actual results are in
paginationKey, // Key that the pagination info is in
resultsKeyToRemove, // Key that the results are nested under to remove for each entry
additionalModification) {
    const additionaProperties = Object.fromEntries(Object.entries(queryResult).filter(([key]) => key !== resultsKey && key !== paginationKey));
    let trimmedResults = queryResult[resultsKey];
    if (resultsKeyToRemove) {
        trimmedResults = trimmedResults.map((result) => result[resultsKeyToRemove] || {});
    }
    const formattedResultBase = {
        results: trimmedResults,
        pageInfo: queryResult[paginationKey],
    };
    let result = {
        ...formattedResultBase,
        ...additionaProperties,
    };
    if (additionalModification)
        result = additionalModification(result);
    return result;
}

const emptyPageInfo = {
    endCursor: null,
    hasNextPage: false,
    hasPreviousPage: false,
    startCursor: null,
};
function weiToGwei(wei) {
    return +(wei / 1e9).toFixed(2);
}

const DEFAULT_CHAIN = 'ethereum';

class QNInputValidationError extends Error {
    constructor({ messages, zodError, }) {
        super(`QuickNode SDK Input Validation Error: ${messages.join(', ')}`);
        this.messages = messages;
        this.issues = zodError.issues;
        this.zodError = zodError; // see https://github.com/colinhacks/zod/blob/HEAD/ERROR_HANDLING.md
    }
}

class QNInvalidEndpointUrl extends Error {
    constructor() {
        super('Endpoint URL is not in a valid QuickNode URL format. Please check the URL and try again');
    }
}

class QNChainNotSupported extends Error {
    constructor(endpointUrl) {
        super(`The chain for endpoint URL ${endpointUrl} is not currently supported by the QuickNode SDK.`);
    }
}

function formatErrors(baseError) {
    const errorMessages = [];
    baseError.errors.forEach((error) => {
        errorMessages.push(`${error.path.length > 0 ? error.path + ': ' : ''}${error.message}`);
    });
    return errorMessages.length > 0
        ? new QNInputValidationError({
            messages: errorMessages,
            zodError: baseError,
        })
        : null;
}
// Decorator for runtime validation to handle input that is unknown at compile time
function ValidateInput(schema) {
    return function (target, propertyName, descriptor) {
        const method = descriptor.value;
        if (!method)
            return;
        descriptor.value = async function (...args) {
            const [input] = args;
            const validation = schema.safeParse(input);
            if (!validation.success) {
                const formattedErrors = formatErrors(validation.error);
                if (formattedErrors) {
                    throw formattedErrors;
                }
            }
            return method.apply(this, args);
        };
    };
}

function modifyQueryForChain(chainName, originalDocumentNode) {
    // We need to deep clone the document node in order to not mutate the query so it is consistent
    // across multiple calls to the same query with different chains
    const documentNode = klona.klona(originalDocumentNode);
    documentNode.definitions = documentNode.definitions.map((doc) => {
        if (doc.kind === graphql.Kind.OPERATION_DEFINITION) {
            doc.selectionSet.selections = doc.selectionSet.selections.map((selection) => {
                if (selection.kind === graphql.Kind.FIELD &&
                    selection.name.kind == graphql.Kind.NAME &&
                    selection.name.value === 'ethereum') {
                    const updatedChainSelection = {
                        ...selection,
                        name: { ...selection.name, value: chainName },
                    };
                    return updatedChainSelection;
                }
                return selection;
            });
        }
        return doc;
    });
    return documentNode;
}

class NftsController {
    constructor(client, defaultChain = DEFAULT_CHAIN) {
        this.client = client;
        this.defaultChain = defaultChain;
    }
    async getByWallet(variables) {
        const { address, ...allVariables } = variables;
        if (isValidENSAddress(address)) {
            return this.getByWalletENS({
                ensName: address,
                ...allVariables,
            });
        }
        return this.getByWalletAddress({
            address,
            ...allVariables,
        });
    }
    async getByWalletENS(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetWalletNFTsByEnsDocument);
        const result = await this.client.query({
            query: query,
            variables: queryVariables,
        });
        const walletByENS = result?.data?.[userChain]?.walletByENS;
        if (!walletByENS?.walletNFTs?.length) {
            // Address can still be valid ENS name, but not have any NFTs
            const address = walletByENS?.address || '';
            const ensName = walletByENS?.ensName || '';
            return {
                address: address,
                ensName: ensName,
                results: [],
                pageInfo: emptyPageInfo,
            };
        }
        const formattedResult = formatQueryResult(walletByENS, 'walletNFTs', 'walletNFTsPageInfo', 'nft');
        return formattedResult;
    }
    async getByWalletAddress(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetWalletNFTsByAddressDocument);
        const result = await this.client.query({
            query: query,
            variables: queryVariables,
        });
        const walletByAddress = result?.data?.[userChain]?.walletByAddress;
        if (!walletByAddress?.walletNFTs?.length) {
            const address = walletByAddress?.address || '';
            const ensName = walletByAddress?.ensName || '';
            return {
                address: address,
                ensName: ensName,
                results: [],
                pageInfo: emptyPageInfo,
            };
        }
        const formattedResult = formatQueryResult(walletByAddress, 'walletNFTs', 'walletNFTsPageInfo', 'nft');
        return formattedResult;
    }
    async getTrendingCollections(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetTrendingCollectionsDocument);
        const result = await this.client.query({
            query: query,
            variables: queryVariables,
        });
        const chainResult = result?.data?.[userChain];
        if (chainResult?.trendingCollections?.length) {
            const formattedResult = formatQueryResult(chainResult, 'trendingCollections', 'trendingCollectionsPageInfo', 'collection');
            return formattedResult;
        }
        return {
            results: [],
            pageInfo: emptyPageInfo,
        };
    }
    async getByContractAddress(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetWalletNFTsByContractAddressDocument);
        const result = await this.client.query({
            query: query,
            variables: queryVariables,
        });
        const collection = result?.data?.[userChain]?.collection;
        if (!collection?.nfts?.length) {
            return {
                standard: null,
                results: [],
                pageInfo: emptyPageInfo,
            };
        }
        const setErcStandard = (results) => {
            const standardMap = {
                ERC1155Collection: 'ERC1155',
                ERC721Collection: 'ERC721',
            };
            // Remove address too since it was only used as a key field
            const { __typename, address, ...newResults } = results;
            return {
                ...newResults,
                standard: standardMap[results['__typename']] || null,
            };
        };
        const formattedResult = formatQueryResult(collection, 'nfts', 'nftsPageInfo', null, setErcStandard);
        return formattedResult;
    }
    async getNFTDetails(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetNFTDetailsDocument);
        const result = await this.client.query({
            query,
            variables: queryVariables,
        });
        const nft = result?.data?.[userChain]?.nft;
        if (nft)
            return { nft };
        return { nft: null };
    }
    async getCollectionDetails(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetNftCollectionDetailsDocument);
        const result = await this.client.query({
            query: query,
            variables: queryVariables,
        });
        const collection = result?.data?.[userChain]?.collection;
        if (collection)
            return { collection };
        return { collection: null };
    }
    async verifyOwnership(variables) {
        const { address, ...allVariables } = variables;
        if (isValidENSAddress(address)) {
            return this.verifyOwnershipByENS({
                ensName: address,
                ...allVariables,
            });
        }
        return this.verifyOwnershipByAddress({
            address,
            ...allVariables,
        });
    }
    async verifyOwnershipByAddress(variables) {
        const { chain, address, nfts } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetVerifyOwnershipByAddressDocument);
        const result = await this.client.query({
            query: query,
            variables: { address, filter: { contractTokens: nfts } },
        });
        const walletNFTs = result?.data?.[userChain]?.walletByAddress?.walletNFTs;
        return !!walletNFTs?.length;
    }
    async verifyOwnershipByENS(variables) {
        const { chain, ensName, nfts } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetVerifyOwnershipByENSDocument);
        const result = await this.client.query({
            query: query,
            variables: { ensName, filter: { contractTokens: nfts } },
        });
        const walletByENS = result?.data?.[userChain]?.walletByENS?.walletNFTs;
        return !!walletByENS?.length;
    }
}
tslib.__decorate([
    ValidateInput(walletByAddressValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], NftsController.prototype, "getByWallet", null);
tslib.__decorate([
    ValidateInput(nftTrendingCollectionsValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], NftsController.prototype, "getTrendingCollections", null);
tslib.__decorate([
    ValidateInput(nftsByContractAddressValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], NftsController.prototype, "getByContractAddress", null);
tslib.__decorate([
    ValidateInput(nftDetailsValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], NftsController.prototype, "getNFTDetails", null);
tslib.__decorate([
    ValidateInput(nftCollectionDetailsValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], NftsController.prototype, "getCollectionDetails", null);
tslib.__decorate([
    ValidateInput(verifyOwnershipValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], NftsController.prototype, "verifyOwnership", null);

const balancesByWalletAddressValidator = zod.z
    .object({
    address: zod.z.union([isENSAddress, isEvmAddress]),
})
    .merge(paginationParams)
    .merge(supportedChainInput)
    .strict();

class TokensController {
    constructor(client, defaultChain = DEFAULT_CHAIN) {
        this.client = client;
        this.defaultChain = defaultChain;
    }
    async getBalancesByWallet(variables) {
        const { address, ...allVariables } = variables;
        if (isValidENSAddress(address)) {
            return this.getBalancesByWalletENS({
                ensName: address,
                ...allVariables,
            });
        }
        return this.getBalancesByWalletAddress({
            address,
            ...allVariables,
        });
    }
    async getBalancesByWalletENS(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetBalancesByWalletENSDocument);
        const result = await this.client.query({
            variables: queryVariables,
            query: query,
        });
        const walletByENS = result?.data?.[userChain]?.walletByENS;
        if (!walletByENS?.tokenBalances?.length) {
            // Address can still be valid ENS name, but not have any balances
            const address = walletByENS?.address || '';
            const ensName = walletByENS?.ensName || '';
            return {
                address: address,
                ensName: ensName,
                results: [],
                pageInfo: emptyPageInfo,
            };
        }
        const formattedResult = formatQueryResult(walletByENS, 'tokenBalances', 'tokenBalancesPageInfo', null, this.flattenBalanceResponses // Remove the "contract" key and move info to balance result body
        );
        return formattedResult;
    }
    async getBalancesByWalletAddress(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetBalancesByWalletAddressDocument);
        const result = await this.client.query({
            variables: queryVariables,
            query: query,
        });
        const walletByAddress = result?.data?.[userChain]?.walletByAddress;
        if (!walletByAddress?.tokenBalances?.length) {
            // Address can still be valid address, but not have any balances
            const address = walletByAddress?.address || '';
            const ensName = walletByAddress?.ensName || '';
            return {
                address: address,
                ensName: ensName,
                results: [],
                pageInfo: emptyPageInfo,
            };
        }
        const formattedResult = formatQueryResult(walletByAddress, 'tokenBalances', 'tokenBalancesPageInfo', null, this.flattenBalanceResponses // Remove the "contract" key and move info to balance result body
        );
        return formattedResult;
    }
    flattenBalanceResponses(response) {
        const modifiedResults = response.results.map((result) => {
            const { contract: { ...contractInfo }, ...balanceInfo } = result;
            return { ...balanceInfo, ...contractInfo };
        });
        response.results = modifiedResults;
        return response;
    }
}
tslib.__decorate([
    ValidateInput(balancesByWalletAddressValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], TokensController.prototype, "getBalancesByWallet", null);

const gasPricesValidator = zod.z
    .object({
    returnInGwei: zod.z.boolean().nullish(),
    filter: gasPriceFilters.nullish(),
})
    .merge(supportedChainInput)
    .strict();

class UtilsController {
    constructor(client, defaultChain = DEFAULT_CHAIN) {
        this.client = client;
        this.defaultChain = defaultChain;
    }
    async getGasPrices(variables) {
        const { chain, ...queryVariables } = variables;
        const returnInGwei = variables.returnInGwei || false;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetGasPricesDocument);
        const result = await this.client.query({
            query: query,
            variables: queryVariables,
        });
        const gasPrices = result?.data?.[userChain]?.gasPrices;
        if (Array.isArray(gasPrices) && gasPrices.length > 0) {
            if (returnInGwei) {
                const fieldsToTransform = [
                    'total',
                    'average',
                    'ceiling',
                    'floor',
                    'median',
                ];
                const modifiedGasPrices = gasPrices.map((gasPrice) => {
                    fieldsToTransform.map((field) => {
                        gasPrice[field] = weiToGwei(gasPrice[field]);
                    });
                    return gasPrice;
                });
                return { gasPrices: modifiedGasPrices };
            }
            return { gasPrices };
        }
        return { gasPrices: [] };
    }
}
tslib.__decorate([
    ValidateInput(gasPricesValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], UtilsController.prototype, "getGasPrices", null);

// Using zod for runtime validation
const contractDetailsValidator = zod.z
    .object({
    contractAddress: isEvmAddress,
})
    .merge(supportedChainInput)
    .strict();

class ContractsController {
    constructor(client, defaultChain = DEFAULT_CHAIN) {
        this.client = client;
        this.defaultChain = defaultChain;
    }
    async getDetails(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetContractDetailsDocument);
        const result = await this.client.query({
            variables: queryVariables,
            query: query,
        });
        const contract = result?.data?.[userChain]?.contract;
        if (contract)
            return { contract };
        return { contract: null };
    }
}
tslib.__decorate([
    ValidateInput(contractDetailsValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], ContractsController.prototype, "getDetails", null);

const contractEventsValidator = zod.z
    .object({
    contractAddress: isEvmAddress,
})
    .merge(baseEventsInput)
    .merge(supportedChainInput)
    .strict();

const collectionEventsValidator = zod.z
    .object({
    contractAddress: isEvmAddress,
})
    .merge(baseEventsInput)
    .merge(supportedChainInput)
    .strict();

const nftEventsValidator = zod.z
    .object({
    contractAddress: isEvmAddress,
    tokenId: zod.z.string(),
})
    .merge(baseEventsInput)
    .merge(supportedChainInput)
    .strict();

const allEventsValidator = baseEventsInput
    .merge(supportedChainInput)
    .strict();

class EventsController {
    constructor(client, defaultChain = DEFAULT_CHAIN) {
        this.client = client;
        this.defaultChain = defaultChain;
    }
    async getByContract(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthereumMainnetEventsByContractDocument);
        const result = await this.client.query({
            query: query,
            variables: queryVariables,
        });
        const contract = result?.data?.[userChain]?.contract;
        if (!contract?.tokenEvents?.length) {
            return {
                results: [],
                pageInfo: emptyPageInfo,
            };
        }
        const formattedResult = formatQueryResult(contract, 'tokenEvents', 'tokenEventsPageInfo');
        return formattedResult;
    }
    async getByNFTCollection(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetEventsByCollectionDocument);
        const result = await this.client.query({
            query: query,
            variables: queryVariables,
        });
        const collection = result?.data?.[userChain]?.collection;
        if (!collection?.tokenEvents?.length)
            return { results: [], pageInfo: emptyPageInfo };
        function removeKeyFields(results) {
            const { address, ...newResults } = results;
            return newResults;
        }
        const formattedResult = formatQueryResult(collection, 'tokenEvents', 'tokenEventsPageInfo', null, removeKeyFields);
        return formattedResult;
    }
    async getByNFT(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthereumMainnetEventsByNftDocument);
        const result = await this.client.query({
            query: query,
            variables: queryVariables,
        });
        const nft = result?.data?.[userChain]?.nft;
        if (!nft?.tokenEvents?.length)
            return { results: [], pageInfo: emptyPageInfo };
        function removeKeyFields(results) {
            const { contractAddress, tokenId, ...newResults } = results;
            return newResults;
        }
        const formattedResult = formatQueryResult(nft, 'tokenEvents', 'tokenEventsPageInfo', null, removeKeyFields);
        return formattedResult;
    }
    async getAll(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthereumMainnetEventsGetAllDocument);
        const result = await this.client.query({
            query: query,
            variables: queryVariables,
        });
        const events = result?.data?.[userChain];
        if (events?.tokenEvents?.length) {
            const formattedResult = formatQueryResult(events, 'tokenEvents', 'tokenEventsPageInfo');
            return formattedResult;
        }
        return { results: [], pageInfo: emptyPageInfo };
    }
}
tslib.__decorate([
    ValidateInput(contractEventsValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], EventsController.prototype, "getByContract", null);
tslib.__decorate([
    ValidateInput(collectionEventsValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], EventsController.prototype, "getByNFTCollection", null);
tslib.__decorate([
    ValidateInput(nftEventsValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], EventsController.prototype, "getByNFT", null);
tslib.__decorate([
    ValidateInput(allEventsValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], EventsController.prototype, "getAll", null);

const transactionsBySearchValidator = baseTransactionsInput
    .merge(supportedChainInput)
    .strict();

const transactionsByHashValidator = zod.z
    .object({
    hash: isEvmTransactionHash,
})
    .merge(supportedChainInput)
    .strict();

class TransactionsController {
    constructor(client, defaultChain = DEFAULT_CHAIN) {
        this.client = client;
        this.defaultChain = defaultChain;
    }
    async getByWallet(variables) {
        const { address, ...allVariables } = variables;
        let queryResult;
        if (isValidENSAddress(address)) {
            queryResult = await this.getByWalletENS({
                ensName: address,
                ...allVariables,
            });
        }
        else {
            queryResult = await this.getByWalletAddress({
                address,
                ...allVariables,
            });
        }
        if (!queryResult?.transactions?.length) {
            // Address can still be valid address, but not have any transactions
            const address = queryResult?.address || '';
            const ensName = queryResult?.ensName || '';
            return {
                address: address,
                ensName: ensName,
                results: [],
                pageInfo: emptyPageInfo,
            };
        }
        const formattedResult = formatQueryResult(queryResult, 'transactions', 'transactionsPageInfo');
        return formattedResult;
    }
    async getByWalletAddress(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetTransactionsByWalletAddressDocument);
        const result = await this.client.query({
            variables: queryVariables,
            query: query,
        });
        const walletByAddress = result?.data?.[userChain]?.walletByAddress;
        return walletByAddress;
    }
    async getByWalletENS(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetTransactionsByWalletENSDocument);
        const result = await this.client.query({
            variables: queryVariables,
            query: query,
        });
        const walletByENS = result?.data?.[userChain]?.walletByENS;
        return walletByENS;
    }
    async getAll(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetTransactionsBySearchDocument);
        const result = await this.client.query({
            variables: queryVariables,
            query: query,
        });
        const transactions = result?.data?.[userChain];
        if (transactions && transactions?.transactions?.length > 0) {
            const formattedResult = formatQueryResult(transactions, 'transactions', 'transactionsPageInfo');
            return formattedResult;
        }
        return {
            results: [],
            pageInfo: emptyPageInfo,
        };
    }
    async getByHash(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = modifyQueryForChain(userChain, CodegenEthMainnetTransactionsByHashDocument);
        const result = await this.client.query({
            variables: queryVariables,
            query: query,
        });
        const transaction = result?.data?.[userChain];
        if (transaction?.transaction)
            return transaction;
        return { transaction: null };
    }
}
tslib.__decorate([
    ValidateInput(balancesByWalletAddressValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], TransactionsController.prototype, "getByWallet", null);
tslib.__decorate([
    ValidateInput(transactionsBySearchValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], TransactionsController.prototype, "getAll", null);
tslib.__decorate([
    ValidateInput(transactionsByHashValidator),
    tslib.__metadata("design:type", Function),
    tslib.__metadata("design:paramtypes", [Object]),
    tslib.__metadata("design:returntype", Promise)
], TransactionsController.prototype, "getByHash", null);

var name="@quicknode/sdk";var repository={type:"git",url:"https://github.com/quiknode-labs/qn-oss.git",directory:"packages/libs/sdk"};var license="MIT";var version="1.1.4";var main="./cjs/index.js";var module$1="./esm/src/index.js";var types="./index.d.ts";var sideEffects=false;var dependencies={"@urql/core":"^4.0.7","@urql/exchange-graphcache":"^6.0.4","cross-fetch":"^3.1.6",graphql:"^16.6.0",klona:"^2.0.6",tslib:"^2.5.3",viem:"^1.2.0",zod:"^3.21.4"};var devDependencies={"@graphql-codegen/cli":"4.0.1","@graphql-codegen/fragment-matcher":"^3.3.1","@graphql-codegen/typed-document-node":"^4.0.1","@graphql-codegen/typescript":"2.8.0","@graphql-codegen/typescript-operations":"^2.5.5","@pollyjs/adapter-node-http":"^6.0.5","@pollyjs/core":"^6.0.5","@pollyjs/persister-fs":"^6.0.5","@types/jest":"^29.5.1","@types/mocha":"^10.0.1","@types/node":"^18.13.0","@types/supertest":"^2.0.12",dotenv:"^16.0.3","eslint-plugin-no-only-tests":"^3.1.0",supertest:"^6.3.3"};var scripts={codegen:"npx graphql-codegen --require dotenv/config"};var exports$1={".":{"import":"./esm/src/index.js",require:"./cjs/index.js"},"./api":{"import":"./esm/src/api/index.js","default":"./cjs/src/api/index.js",types:"./esm/src/api/index.d.ts"},"./core":{"import":"./esm/src/core/index.js","default":"./cjs/src/core/index.js",types:"./esm/src/core/index.d.ts"}};var typesVersions={"*":{api:["./esm/src/api/index.d.ts"],core:["./esm/src/core/index.d.ts"]}};var packageJson = {name:name,repository:repository,license:license,version:version,main:main,module:module$1,types:types,sideEffects:sideEffects,dependencies:dependencies,devDependencies:devDependencies,scripts:scripts,exports:exports$1,typesVersions:typesVersions};

class API {
    constructor({ graphApiKey, additionalHeaders, defaultChain, } = {}) {
        if (!graphApiKey) {
            console.warn('QuickNode SDK warning: no apiKey provided. Access with no apiKey is heavily rate limited and intended for development use only. For higher rate limits or production usage, create an account on https://www.quicknode.com/');
        }
        this.graphApiKey = graphApiKey;
        this.additionalHeaders = additionalHeaders;
        this.urqlClient = this.createUrqlClient();
        this.customUrqlClient = new CustomUrqlClient(this.urqlClient);
        this.defaultChain = defaultChain || DEFAULT_CHAIN;
        this.nfts = new NftsController(this.customUrqlClient, this.defaultChain);
        this.tokens = new TokensController(this.customUrqlClient, this.defaultChain);
        this.utils = new UtilsController(this.customUrqlClient, this.defaultChain);
        this.contracts = new ContractsController(this.customUrqlClient, this.defaultChain);
        this.transactions = new TransactionsController(this.customUrqlClient, this.defaultChain);
        this.events = new EventsController(this.customUrqlClient, this.defaultChain);
        // Re-export the Urql client configured to use the Graph API for use with custom queries
        this.graphApiClient = this.urqlClient;
    }
    createUrqlClient() {
        const headers = { ...this.additionalHeaders };
        if (this.graphApiKey)
            headers['x-api-key'] = this.graphApiKey;
        headers['x-quicknode-sdk'] = 'js-sdk';
        headers['x-quicknode-sdk-version'] = packageJson?.version || 'n/a';
        const useNftKey = (data) => `${data['contractAddress']}:${data['tokenId']}`;
        const useAddressAsKey = (data) => `${data['address']}`;
        const useTransactionHashAndIndex = (data) => `${data['transactionHash']}:${data['transferIndex']}`;
        const urqlCache = exchangeGraphcache.cacheExchange({
            keys: {
                EVMSchemaType: () => null,
                Collection: useAddressAsKey,
                CollectionOHLCVChart: () => null,
                Contract: useAddressAsKey,
                ERC721NFT: useNftKey,
                ERC721Collection: useAddressAsKey,
                ERC1155NFT: useNftKey,
                ERC1155Collection: useAddressAsKey,
                GasPrice: () => null,
                NFT: useNftKey,
                NFTContract: useAddressAsKey,
                TokenAttribute: () => null,
                TokenContract: useAddressAsKey,
                TokenEvent: useTransactionHashAndIndex,
                TokenMintEvent: useTransactionHashAndIndex,
                TokenBurnEvent: useTransactionHashAndIndex,
                TokenSaleEvent: useTransactionHashAndIndex,
                TokenSwapEvent: useTransactionHashAndIndex,
                TokenTransferEvent: useTransactionHashAndIndex,
                TokenUpload: () => null,
                OpenSeaMetadata: () => null,
                Transaction: (data) => `${data['hash']}`,
                TrendingCollection: () => null,
                Wallet: (data) => `${data['address']}`,
                WalletNFT: () => null,
                WalletTokenBalance: () => null,
            },
        });
        const client = new core.Client({
            fetch: fetch__default["default"],
            url: process.env['NX_GRAPHQL_API_URI'] ||
                'https://api.quicknode.com/graphql',
            exchanges: [urqlCache, core.fetchExchange],
            fetchOptions: () => ({ headers }),
        });
        return client;
    }
}

// We can't dynamically extend the viem client based on which add-ons are specified, which would
// make the types fully align with the add-ons for the client, so instead we do run-time checks to
// prevent calling add-ons not explicitly added in the config
function checkAddOnEnabled(enabled, humanName, configName) {
    if (!enabled) {
        throw new Error(`${humanName} is not set as enabled. Please ensure the addon is enabled on your QuickNode endpoint and enable ${configName} in the Core configuration argument`);
    }
}

const qnFetchNFTInputSchema = zod.z
    .object({
    wallet: isEvmAddress,
    contracts: zod.z.array(isEvmAddress).nullish(),
    omitFields: zod.z.array(zod.z.string()).nullish(),
})
    .merge(rpcPaginationParams)
    .strict();

const qnFetchNFTCollectionDetailsInputSchema = zod.z
    .object({
    contracts: zod.z.array(isEvmAddress),
})
    .strict();

const qnFetchNFTsByCollectionInputSchema = zod.z
    .object({
    collection: isEvmAddress,
    tokens: zod.z.array(zod.z.string()).nullish(),
    omitFields: zod.z.array(zod.z.string()).nullish(),
})
    .merge(rpcPaginationParams)
    .strict();

const qnGetTransfersByNFTInputSchema = zod.z
    .object({
    collection: isEvmAddress,
    collectionTokenId: zod.z.string(),
})
    .merge(rpcPaginationParams)
    .strict();

const qnVerifyNFTsOwnerInputSchema = zod.z
    .object({
    wallet: isEvmAddress,
    contracts: zod.z.array(zod.z.string()), // TODO: make this enforce the address:id format
})
    .strict();

const qnGetTokenMetadataByCAInputSchema = zod.z
    .object({
    contract: isEvmAddress,
})
    .strict();

const qnGetTokenMetadataBySymbolInputSchema = zod.z
    .object({
    symbol: zod.z.string(),
})
    .merge(rpcPaginationParams)
    .strict();

const qnGetTransactionsByAddressInputSchema = zod.z
    .object({
    address: isEvmAddress,
    fromBlock: zod.z.number().positive().nullish(),
    toBlock: zod.z.number().positive().nullish(),
})
    .merge(rpcPaginationParams)
    .strict()
    .refine(({ fromBlock, toBlock }) => {
    if (fromBlock && toBlock)
        return fromBlock < toBlock;
    return true;
}, { message: 'fromBlock must be less than toBlock' });

const qnGetWalletTokenBalanceInputSchema = zod.z
    .object({
    wallet: isEvmAddress,
    contracts: zod.z.array(isEvmAddress).nullish(),
})
    .merge(rpcPaginationParams)
    .strict();

const qnGetWalletTokenTransactionsInputSchema = zod.z
    .object({
    address: isEvmAddress,
    contract: isEvmAddress,
    fromBlock: zod.z.number().positive().nullish(),
    toBlock: zod.z.number().positive().nullish(),
})
    .merge(rpcPaginationParams)
    .strict();

function nftAndTokenValidator(config, schema, args) {
    checkAddOnEnabled(config.addOns?.nftTokenV2 ?? false, 'NFT And Token RPC API V2', 'nftTokenV2');
    // Uses zod to validate schema at runtime
    const validation = schema.safeParse(args);
    if (!validation.success) {
        const formattedErrors = formatErrors(validation.error);
        if (formattedErrors)
            throw formattedErrors;
    }
}
const nftAndTokenActions = (client, config) => ({
    async qn_fetchNFTCollectionDetails(args) {
        nftAndTokenValidator(config, qnFetchNFTCollectionDetailsInputSchema, args);
        const response = await client.request({
            method: 'qn_fetchNFTCollectionDetails',
            params: [args],
        });
        return response;
    },
    async qn_fetchNFTs(args) {
        nftAndTokenValidator(config, qnFetchNFTInputSchema, args);
        const response = await client.request({
            method: 'qn_fetchNFTs',
            params: [args],
        });
        return response;
    },
    async qn_fetchNFTsByCollection(args) {
        nftAndTokenValidator(config, qnFetchNFTsByCollectionInputSchema, args);
        const response = await client.request({
            method: 'qn_fetchNFTsByCollection',
            params: [args],
        });
        return response;
    },
    async qn_getTransfersByNFT(args) {
        nftAndTokenValidator(config, qnGetTransfersByNFTInputSchema, args);
        const response = await client.request({
            method: 'qn_getTransfersByNFT',
            params: [args],
        });
        return response;
    },
    async qn_verifyNFTsOwner(args) {
        nftAndTokenValidator(config, qnVerifyNFTsOwnerInputSchema, args);
        const response = await client.request({
            method: 'qn_verifyNFTsOwner',
            params: [args],
        });
        return response;
    },
    async qn_getTokenMetadataByContractAddress(args) {
        nftAndTokenValidator(config, qnGetTokenMetadataByCAInputSchema, args);
        const response = await client.request({
            method: 'qn_getTokenMetadataByContractAddress',
            params: [args],
        });
        return response;
    },
    async qn_getTokenMetadataBySymbol(args) {
        nftAndTokenValidator(config, qnGetTokenMetadataBySymbolInputSchema, args);
        const response = await client.request({
            method: 'qn_getTokenMetadataBySymbol',
            params: [args],
        });
        return response;
    },
    async qn_getTransactionsByAddress(args) {
        nftAndTokenValidator(config, qnGetTransactionsByAddressInputSchema, args);
        const response = await client.request({
            method: 'qn_getTransactionsByAddress',
            params: [args],
        });
        return response;
    },
    async qn_getWalletTokenBalance(args) {
        nftAndTokenValidator(config, qnGetWalletTokenBalanceInputSchema, args);
        const response = await client.request({
            method: 'qn_getWalletTokenBalance',
            params: [args],
        });
        return response;
    },
    async qn_getWalletTokenTransactions(args) {
        nftAndTokenValidator(config, qnGetWalletTokenTransactionsInputSchema, args);
        const response = await client.request({
            method: 'qn_getWalletTokenTransactions',
            params: [args],
        });
        return response;
    },
});

const ETH_MAINNET_NETWORK = 'ethereum-mainnet';
const qnChainToViemChain = {
    'arbitrum-mainnet': chains.arbitrum,
    'arbitrum-goerli': chains.arbitrumGoerli,
    'avalanche-mainnet': chains.avalanche,
    'avalanche-testnet': chains.avalancheFuji,
    'base-goerli': chains.baseGoerli,
    ['bsc']: chains.bsc,
    'bsc-testnet': chains.bscTestnet,
    'celo-mainnet': chains.celo,
    ['fantom']: chains.fantom,
    ['xdai']: chains.gnosis,
    ['gnosis']: chains.gnosis,
    'ethereum-goerli': chains.goerli,
    'harmony-mainnet': chains.harmonyOne,
    [ETH_MAINNET_NETWORK]: chains.mainnet,
    ['optimism']: chains.optimism,
    'optimism-goerli': chains.optimismGoerli,
    ['matic']: chains.polygon,
    ['polygon']: chains.polygon,
    'matic-testnet': chains.polygonMumbai,
    'zkevm-mainnet': chains.polygonZkEvm,
    'zkevm-testnet': chains.polygonZkEvmTestnet,
    'ethereum-sepolia': chains.sepolia,
};
function chainNameFromEndpoint(endpointUrl) {
    let hostnameParts;
    try {
        const parsedUrl = new URL(endpointUrl);
        hostnameParts = parsedUrl.hostname.split('.');
    }
    catch (e) {
        throw new QNInvalidEndpointUrl();
    }
    const quiknode = hostnameParts.at(-2);
    const chainOrDiscover = hostnameParts.at(-3);
    if (quiknode !== 'quiknode' || !chainOrDiscover)
        throw new QNInvalidEndpointUrl();
    const indexOfName = chainOrDiscover === 'discover' ? -4 : -3;
    const lengthOfEthereum = chainOrDiscover === 'discover' ? 4 : 3;
    if (hostnameParts.length === lengthOfEthereum)
        return ETH_MAINNET_NETWORK;
    const potentialChainName = hostnameParts.at(indexOfName);
    if (potentialChainName)
        return potentialChainName;
    throw new QNInvalidEndpointUrl();
}
function deriveChainFromUrl(endpointUrl) {
    const chainName = chainNameFromEndpoint(endpointUrl);
    const viemChain = qnChainToViemChain[chainName];
    if (viemChain)
        return viemChain;
    throw new QNChainNotSupported(endpointUrl);
}

function setupGlobalFetch() {
    // Required for viem to work in node
    if (!globalThis.fetch) {
        globalThis.fetch = fetch__default["default"];
        globalThis.Headers = fetch.Headers;
        globalThis.Request = fetch.Request;
        globalThis.Response = fetch.Response;
    }
}

const buildQNActions = (config) => {
    return (client) => ({
        ...nftAndTokenActions(client, config),
    });
};
class Core {
    constructor({ endpointUrl, chain, config = {} }) {
        setupGlobalFetch();
        this.endpointUrl = endpointUrl;
        const baseClient = viem.createClient({
            chain: chain || deriveChainFromUrl(endpointUrl),
            transport: viem.http(this.endpointUrl),
        }).extend(viem.publicActions);
        const qnClient = baseClient.extend(buildQNActions(config));
        this.client = qnClient;
    }
}

const QuickNode = {
    API: API,
    Core: Core,
};

Object.defineProperty(exports, 'gql', {
    enumerable: true,
    get: function () { return core.gql; }
});
exports.viem = viem__namespace;
exports.API = API;
exports.Core = Core;
exports.QNChainNotSupported = QNChainNotSupported;
exports.QNInputValidationError = QNInputValidationError;
exports.QNInvalidEndpointUrl = QNInvalidEndpointUrl;
exports["default"] = QuickNode;
